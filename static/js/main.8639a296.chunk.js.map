{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","dropdownMenuStyle","display","handleToggleDropdownMenu","newState","Object","assign","setState","className","Grid","padded","Container","Menu","borderless","inverted","size","Item","header","as","active","Dropdown","text","Divider","Header","fixed","position","Button","icon","basic","toggle","onClick","this","Icon","name","vertical","fluid","style","Segment","stackable","Column","width","Image","src","columns","href","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8639a296.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport {\n  Button,\n  Container,\n  Dropdown,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Menu,\n  Segment\n} from \"semantic-ui-react\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    dropdownMenuStyle: {\n      display: \"none\"\n    }\n  };\n\n  handleToggleDropdownMenu = () => {\n    let newState = Object.assign({}, this.state);\n    if (newState.dropdownMenuStyle.display === \"none\") {\n      newState.dropdownMenuStyle = { display: \"flex\" };\n    } else {\n      newState.dropdownMenuStyle = { display: \"none\" };\n    }\n\n    this.setState(newState);\n  };\n\n  render() {\n    const slickSettings = {\n      autoplay: true,\n      dots: true,\n      speed: 500\n    };\n\n    return (\n      <div className=\"App\">\n        <Grid padded className=\"tablet computer only\">\n          <Container>\n            <Menu borderless inverted size=\"massive\">\n              <Menu.Item header as=\"a\">\n                Project Test\n              </Menu.Item>\n              <Menu.Item active as=\"a\">\n                Home\n              </Menu.Item>\n              <Menu.Item as=\"a\">About</Menu.Item>\n              <Menu.Item as=\"a\">Contact</Menu.Item>\n              <Dropdown text=\"Dropdown\" className=\"item\">\n                <Dropdown.Menu>\n                  <Dropdown.Item as=\"a\">Action</Dropdown.Item>\n                  <Dropdown.Item as=\"a\">Another action</Dropdown.Item>\n                  <Dropdown.Item as=\"a\">Something else here</Dropdown.Item>\n                  <Dropdown.Divider />\n                  <Dropdown.Header>Navbar header</Dropdown.Header>\n                  <Dropdown.Item as=\"a\">Seperated link</Dropdown.Item>\n                  <Dropdown.Item as=\"a\">One more seperated link</Dropdown.Item>\n                </Dropdown.Menu>\n              </Dropdown>\n            </Menu>\n          </Container>\n        </Grid>\n        <Grid className=\"mobile only\">\n          <Menu inverted borderless size=\"huge\" fixed=\"top\">\n            <Menu.Item header as=\"a\">\n              Project Name\n            </Menu.Item>\n            <Menu.Menu position=\"right\">\n              <Menu.Item>\n                <Button\n                  icon\n                  basic\n                  inverted\n                  toggle\n                  onClick={this.handleToggleDropdownMenu}\n                >\n                  <Icon name=\"content\" />\n                </Button>\n              </Menu.Item>\n            </Menu.Menu>\n            <Menu\n              vertical\n              borderless\n              inverted\n              fluid\n              style={this.state.dropdownMenuStyle}\n            >\n              <Menu.Item active as=\"a\">\n                Home\n              </Menu.Item>\n              <Menu.Item as=\"a\">About</Menu.Item>\n              <Menu.Item as=\"a\">Contact</Menu.Item>\n              <Dropdown text=\"Dropdown\" className=\"item\">\n                <Dropdown.Menu>\n                  <Dropdown.Item as=\"a\">Action</Dropdown.Item>\n                  <Dropdown.Item as=\"a\">Another action</Dropdown.Item>\n                  <Dropdown.Item as=\"a\">Something else here</Dropdown.Item>\n                  <Dropdown.Divider />\n                  <Dropdown.Header>Navbar header</Dropdown.Header>\n                  <Dropdown.Item as=\"a\">Seperated link</Dropdown.Item>\n                  <Dropdown.Item as=\"a\">One more seperated link</Dropdown.Item>\n                </Dropdown.Menu>\n              </Dropdown>\n            </Menu>\n          </Menu>\n        </Grid>\n        <Container>\n          <h1>新宿御苑</h1>\n          <Segment vertical>\n            <Grid stackable>\n            <Grid.Column width={6}>\n                <Image src=\"/static/images/wireframe/park1.jpg\" />\n              </Grid.Column>\n              <Grid.Column width={10}>\n                <Header as=\"h1\">\n                {\" \"}\n                  <span className=\"sub\">ピクニック</span>\n                </Header>\n                <p>\n                春は満開の桜を見ながらお弁当を食べたり、ピクニックをしながら花見を楽しむことができます。\n                新宿駅から徒歩圏内であるにもかかわらず広い敷地なので、家族でおでかけするにはとても良い公園です。\n                オムツ替えができる場所は園内に14か所あり、赤ちゃん連れのお母さんにも安心。\n                </p>\n              </Grid.Column>\n            </Grid>\n          </Segment>\n          <Segment vertical>\n            <Grid stackable>\n              <Grid.Column width={6}>\n                <Image src=\"/static/images/wireframe/park2.jpg\" />\n              </Grid.Column>\n              <Grid.Column width={10}>\n                <Header as=\"h1\">\n                 <span className=\"sub\">植物園</span>\n                </Header>\n                <p>\n                園内にある植物園。\n                ガラス貼りの建物のなかは寒い季節でも暖かく、日本で野生には育たない温室植物を見ることができる。\n                </p>\n              </Grid.Column>\n            </Grid>\n          </Segment>\n          <Segment vertical>\n            <Grid stackable>\n              <Grid.Column width={10}>\n                <Header as=\"h1\">\n                <span className=\"sub\">園内マップ</span>\n                </Header>\n                <p>\n                広い園内はベビーカーで散歩をすることも可能。専用駐車場があり、車でも行きやすい。親子のための遊び場もある。\n                </p>\n              </Grid.Column>\n              <Grid.Column width={6}>\n                <Image src=\"/static/images/wireframe/park3.jpg\" />\n              </Grid.Column>\n            </Grid>\n          </Segment>\n          <Segment vertical>\n            <Grid columns={2}>\n              <Grid.Column>\n                &copy; 2017 Company, Inc. · <a href=\"#root\">Privacy</a> ·{\" \"}\n                <a href=\"#root\">Terms</a>\n              </Grid.Column>\n              <Grid.Column textAlign=\"right\">\n                <a href=\"#root\">Back to top</a>\n              </Grid.Column>\n            </Grid>\n          </Segment>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}